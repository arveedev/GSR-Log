Product Requirements Document: GSR Log App
1. Project Overview
The GSR Log App is a single-page web application designed for the simple and efficient logging of daily GSR-related data. The app provides a user-friendly interface for data entry, history tracking, and summary viewing. Its key focus is on using a lightweight Node.js backend to serve as the single source of truth, handling all data persistence by storing and retrieving data directly from a structured CSV file.

2. Goals & Objectives
Primary Goal: To provide a simple, reliable, and locally-hosted application for daily data logging and management, powered by a centralized backend.

Objective 1: To ensure seamless data persistence by storing and retrieving all application data from a centralized backend server that uses a structured CSV file as its database.

Objective 2: To offer a clear, tab-based user interface for intuitive navigation across all functionalities (Log Entry, History, Summary, Manage Data, Palay Deliveries).

Objective 3: To enable users to easily manage lookup data (provinces, varieties, etc.) directly within the app's dedicated Manage Data tab.

Objective 4: To create a seamless workflow for logging new entries by integrating Palay Deliveries and AI Entry forms with the main Log Entry and History tabs.

3. Plan & Strategy
Phase 1: Foundational Development (Completed)
This phase focused on building the core structure and initial data management functionalities.

Functionality:

Log Entry Tab: A form for adding new daily data entries.

History Tab: A comprehensive list view of all logged entries, with search and sort functionality.

Summary Tab: Provides aggregated views and daily reports of the data.

Manage Data Tab: A dedicated tab for managing lookup data with separate sub-tabs.

Palay Delivery Tab: A dedicated form for entering palay deliveries, with an "isLogged" flag.

Data Persistence: The ability to save all data to localStorage.

Strategy:

Developed a modular, multi-component React application, with each major feature residing in its own component.

Prioritized a robust CRUD (Create, Read, Update, Delete) implementation that synchronizes with localStorage on every change.

Phase 2: Refinement & Integration (Current Focus)
The project is currently in the process of refining existing features and fixing critical data handling issues to ensure stability. We have successfully addressed all persistent runtime errors except for the pricing tab.

Current Focus: We have successfully completed a major refactoring by removing the dependency on localStorage and establishing the backend server as the single source of truth for all data. The codebase has also been refactored for consistency by using camelCase throughout. We have successfully fixed the handleEditFormChange and ButtonGroup runtime errors. The edit functionality for the Manage Data tab is now operational, with the edit modal styled to be compact and responsive to avoid screen overflow. The complex palayPricing data is now correctly parsed from a JSON string, but the full pricing tab functionality and UI are still pending.

Future Functionality:

Pricing Tab: Implement the final UI and functionality for managing pricing data.

Export Functionality: Remove the redundant CSV export feature as data is now centrally managed by the backend.

Palay Deliveries List: Add a table to the Log Entry tab that lists unlogged deliveries from the Palay Delivery tab.

Auto-Population: A one-click workflow to populate the Log Entry form by selecting an unlogged delivery from the table. The user will be required to confirm the entry before it is added to the log history.

AI (Authority to Issue) Entry Form: A new form that will connect with the log history and the future Milling Overview feature.

Milling Overview: A future feature that monitors and records all milling activities, including palay issued and rice recoveries.

4. Technical Details
Frontend

Framework: React

Language: JavaScript (ES6+)

Styling: We are exclusively using styled-components for all UI styling.

Architecture: The application is built as a series of modular, self-contained components.

State Management: React's built-in useState and useEffect hooks will be used to manage component state, with data now fetched from and sent to the backend API.

Data Handling: The application handles data normalization by manually parsing and transforming incoming data. This includes using JSON.parse to correctly handle complex data structures, and converting snake_case keys from the raw CSV data to camelCase for uniformity in the frontend.

Backend

Platform: Node.js

Purpose: The backend now serves as the primary data store, handling all CRUD (Create, Read, Update, Delete) operations with the structured CSV file. It exposes API endpoints for the frontend to manage all data.

Authentication: N/A (The app is a single-user, single-device tool).

Data Storage: The CSV file on the server is the primary database.

5. Dependencies
Frontend Dependencies:

react: Core React library.

react-dom: Enables React components to render to the DOM.

Backend Dependencies:

express: A web framework for Node.js, used to create the server and API endpoints.

cors: A middleware to enable Cross-Origin Resource Sharing, allowing the frontend to access the backend.

csv-parse: A library for parsing CSV data into a JavaScript array or object.

uuid: For generating unique identifiers.

To install these backend dependencies, run the following command in the backend directory:
npm install express cors csv-parse uuid

6. Collaborative Protocols
Code Changes: Always ask for the latest code for the specific file we are working on before making changes. This ensures we are always on the same page and prevents the introduction of new errors or conflicts.

Canvas Element: Do not use the HTML canvas element or any related libraries unless specifically asked to do so in a prompt.